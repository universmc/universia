const fs = require("fs");
const Groq = require("groq-sdk");
const groq = new Groq();

const bootcss = "<link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'>";
const bootJs = "<script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous'></script>";
const bootstrap = bootcss+bootJs;

const importDicoEmojis = "file://src/json/dicoEmojis.js"

const logo = "Matrix - Tiktok";
const stylus = "darkTheme";

const BsResponse = "`responseHtml`{devOps.html:5}";
const header = "bootstrap navBar+carrousel"
const mainContent = "bootstrap devOps sass video TikToken"
const footer = "asign cc by univers-mc.cloud"

const responseHtml = `${header}"+${mainContent}+${footer}`;

const context = "const 68";
const post = "tiktok";
const job = "Video_maker"
const work = context+post+job;
const Mission = "int√©grer la plus grande‚ÄØcommunaut√© #IA‚ÄØdes transformations num√©riques dans ia.univers-mc.cloud un secteur de mobilit√©s‚ÄØet pour devenir un‚ÄØ#video_Maker."

const workMission = `{
    "title": "# Projet TikTok ‚Äì Drones AR avec Pi",
    "subtitles": [
      {
        "sectionTitle": "Pr√©sentation",
        "content": "Ce projet consiste √† cr√©er une s√©rie de vid√©os TikTok de 68 secondes chacune, pr√©sentant un personnage utilisant des lunettes AR et un drone virtuel. Le script comporte cinq sc√®nes et inclut des fichiers multim√©dias associ√©s."
      },
      {
        "sectionTitle": "Utilisation de GitHub",
        "content": "Nous utilisons GitHub pour g√©rer notre projet en suivant un syst√®me de branches de version pour chaque version de la vid√©o. Ceci simplifie la collaboration et permet d'apporter des modifications sur plusieurs branches de la vid√©o."
      },
      {
        "sectionTitle": "Script des vid√©os",
        "content": "Le script du projet est accessible depuis le fichier 'script.json'. Il pr√©sente une description d√©taill√©e de chaque sc√®ne et renvoie vers les fichiers multim√©dias correspondants."
      },
      {
        "sectionTitle": "Fichiers multim√©dias",
        "content": "Chaque sc√®ne dispose de fichiers multim√©dias h√©berg√©s sur le r√©f√©rentiel GitHub, compos√©s de fichiers audio (MP3), vid√©o (MP4) et texte (TXT). Les noms et liens de ces fichiers peuvent √™tre trouv√©s dans le fichier 'script.json'."
      }
    ],
    "scenes": [
        {
            "id": "scene1",
            "run": true,
            "time": "0-15 seconds",
            "timestamp": 1654481600,
            "audioFile": "audio_scene1.mp3",
            "videoFile": "video_scene1.mp4",
            "textFile": "text_scene1.txt",
            "description": "Pr√©sentation du role:user,name:Mike en Music avec des lunettes AR et l'appareil de contr√¥le de drone virtuel √©quip√©e d'une IA nom√©e IA Une intelligence artificielle dans ciel ma√Ætrisons la cartographie le calcul quantique les approche m√©taphysique et les techniques d'apprentissage automatique dans le cloud computing."
            },
            {
            "id": "scene2",
            "run": true,
            "time": "16-25 seconds",
            "timestamp": 1654481610,
            "audioFile": "audio_scene2.mp3",
            "videoFile": "video_scene2.mp4",
            "textFile": "text_scene2.txt",
            "description": "Le personnage active les lunettes AR et le drone virtuel apparait..."
            },
            {
            "id": "scene3",
            "run": true,
            "time": "26-35 seconds",
            "timestamp": 1654481620,
            "audioFile": "audio_scene3.mp3",
            "videoFile": "video_scene3.mp4",
            "textFile": "text_scene3.txt",
            "description": "Le personnage contr√¥le le drone virtuel avec les lunettes AR pour accomplir une t√¢che particuli√®re dans un [context] particulier (par exemple, inspection d'une structure). (e.g., inspecting a structure)."
            },
            {
            "id": "scene4",
            "run": true,
            "time": "36-55 seconds",
            "timestamp": 1654481630,
            "audioFile": "audio_scene4.mp3",
            "videoFile": "video_scene4.mp4",
            "textFile": "text_scene4.txt",
            "description": "Montrez comment le personnage utilise le drone virtuel en music pour accomplir la t√¢che avec des effets visuels impressionnants gr√¢ce aux lunettes AR."
            },
            {
            "id": "scene5",
            "run": true,
            "time": "56-68 seconds",
            "timestamp": 1654481640,
            "audioFile": "audio_scene5.mp3",
            "videoFile": "video_scene5.mp4",
            "textFile": "text_scene5.txt",
            "description": "Le personnage r√©ussit sa t√¢che et fait un clin d'≈ìil √† la cam√©ra, suivi de l'apparition d'un message incitant les spectateurs √† d√©couvrir les technologies AR et les drones virtuels.."
            }
            ]
  }`;


async function main() {
    groq.chat.completions.create({
        //
        // Required parameters
        
        //
        messages: [
            // Set an optional system message. This sets the behavior of the
            // assistant and can be used to provide specific instructions for
            {role: "assistant",name:"[üìî.codex]", content:"[üìî.codex]/phase[01]:[RUN]:[brainstorming(session{1}.timestamp+)]"},
            {role: "system", content: bootstrap },
            {role: "system", content: BsResponse },
            {role: "system", content: stylus },
            {role: "system", content: logo },
            {role: "system", content: work },
            {role: "system", content: importDicoEmojis },
            {role: "system", content: Mission },
            {role: "system", content: workMission },

            
            // Set a user message for the assistant to respond to.
            {role: "assistant",name:"[üìî.codex]", content:"[üìî.codex]/phase[01]:[END]:[brainstorming(session{1}.timestamp)++]"},
            {
              "role": "system",
              "name":"‚ú®_pi",
              "content": "groq"
            },
      
            //
            {
              "role": "user",
              "content": "[üë®üèΩ‚Äçüíª.Mike]:devops)"
            },
            {role: "system",name:"[üìî.codex]", content:`${responseHtml}`},
            {role: "assistant",name:"‚ú®_pi",content:"groq init TiToken_index.html"},
                // how it should behave throughout the conversation.
    
                {
                    role: "user",
                    content: "G√©n√®re le code HTML de la page TiToken_index.html dans le [Context] de la 'Mission' de cr√©ation de video pour `tiktok' avec des `importDicoEmojis .ia`"
                },
                {
                    role: "assistant",
                    content: "Voici le code HTML d'une page TiToken_index.html avec bootstrap:"
                },
        ],
        // The language model which will generate the completion.
        model: "mixtral-8x7b-32768",
        //
        // Optional parameters
        
        // Controls randomness: lowering results in less random completions.
        // As the temperature approaches zero, the model will become deterministic
        // and repetitive.
        temperature: 0.5,
        // The maximum number of tokens to generate. Requests can use up to
        // 2048 tokens shared between prompt and completion.
        max_tokens: 4096,
        // Controls diversity via nucleus sampling: 0.5 means half of all
        // likelihood-weighted options are considered.
        top_p: 1,
        // A stop sequence is a predefined or user-specified text string that
        // signals an AI to stop generating content, ensuring its responses
        // remain focused and concise. Examples include punctuation marks and
        // markers like "[end]".
        stop: null,
        // If set, partial message deltas will be sent.
        stream: false
    }).then((chatCompletion)=>{
        // Print the completion returned by the LLM.
        const htmlContent = chatCompletion.choices[0]?.message?.content;
        const outputFilePath = "DigitalMobility_" + new Date().toISOString().replace(/[-:TZ]/g, "") + ".html";
        fs.writeFileSync(outputFilePath, htmlContent);
        console.log("Code HTML g√©n√©r√© et enregistr√© dans " + outputFilePath);
    });

}
main();